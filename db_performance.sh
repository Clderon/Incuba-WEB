#!/bin/bash

echo "üóÑÔ∏è PRUEBAS DE RENDIMIENTO - BASE DE DATOS POSTGRESQL"
echo "================================================="
echo ""

# Crear directorio para logs de DB si no existe
mkdir -p performance_logs

# Funci√≥n para verificar conexi√≥n a la base de datos
check_db_connection() {
    echo "üîå VERIFICANDO CONEXI√ìN A LA BASE DE DATOS"
    echo "=========================================="
    
    if docker exec incuba-fiis-db pg_isready -U cristian -d incuba_fiis_development; then
        echo "‚úÖ Base de datos conectada correctamente"
        echo ""
    else
        echo "‚ùå Error de conexi√≥n a la base de datos"
        echo "üí° Verifica que el contenedor de PostgreSQL est√© corriendo"
        exit 1
    fi
}

# Funci√≥n para obtener informaci√≥n b√°sica de la DB
db_basic_info() {
    echo "üìä INFORMACI√ìN B√ÅSICA DE LA BASE DE DATOS"
    echo "========================================"
    
    echo "üî¢ Versi√≥n de PostgreSQL:"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "SELECT version();" 2>/dev/null | grep PostgreSQL
    echo ""
    
    echo "üìè Tama√±o de la base de datos:"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        SELECT 
            pg_database.datname as \"Nombre DB\",
            pg_size_pretty(pg_database_size(pg_database.datname)) as \"Tama√±o\"
        FROM pg_database 
        WHERE datname = 'incuba_fiis_development';
    " 2>/dev/null
    echo ""
    
    echo "üìã Tablas principales y sus tama√±os:"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        SELECT 
            schemaname as \"Schema\",
            tablename as \"Tabla\",
            pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as \"Tama√±o\"
        FROM pg_tables 
        WHERE schemaname = 'public'
        ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
        LIMIT 10;
    " 2>/dev/null
    echo ""
}

# Funci√≥n para verificar conexiones activas
check_active_connections() {
    echo "üîó CONEXIONES ACTIVAS"
    echo "===================="
    
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        SELECT 
            count(*) as \"Conexiones Totales\",
            count(*) FILTER (WHERE state = 'active') as \"Conexiones Activas\",
            count(*) FILTER (WHERE state = 'idle') as \"Conexiones Idle\"
        FROM pg_stat_activity 
        WHERE datname = 'incuba_fiis_development';
    " 2>/dev/null
    echo ""
}

# Funci√≥n para analizar queries lentas
analyze_slow_queries() {
    echo "üêå AN√ÅLISIS DE QUERIES (si pg_stat_statements est√° habilitado)"
    echo "=========================================================="
    
    # Verificar si pg_stat_statements est√° disponible
    EXTENSION_CHECK=$(docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -t -c "SELECT count(*) FROM pg_extension WHERE extname = 'pg_stat_statements';" 2>/dev/null)
    
    if [[ "$EXTENSION_CHECK" -gt 0 ]]; then
        echo "‚úÖ pg_stat_statements disponible"
        docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
            SELECT 
                substring(query, 1, 60) as \"Query (primeros 60 chars)\",
                calls as \"Llamadas\",
                round(total_exec_time::numeric, 2) as \"Tiempo Total (ms)\",
                round(mean_exec_time::numeric, 2) as \"Tiempo Promedio (ms)\"
            FROM pg_stat_statements 
            ORDER BY mean_exec_time DESC 
            LIMIT 5;
        " 2>/dev/null
    else
        echo "‚ö†Ô∏è pg_stat_statements no est√° habilitado"
        echo "üí° Para an√°lisis avanzado, considera habilitarlo en postgresql.conf"
    fi
    echo ""
}

# Funci√≥n para probar rendimiento de queries b√°sicas
test_basic_queries() {
    echo "‚ö° PRUEBA DE RENDIMIENTO DE QUERIES B√ÅSICAS"
    echo "=========================================="
    
    echo "üïê Midiendo tiempo de queries comunes..."
    
    # Test 1: SELECT simple
    echo "üìù Test 1: SELECT b√°sico"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        \timing on
        SELECT count(*) FROM pg_tables;
    " 2>/dev/null | grep Time
    
    # Test 2: Query de metadatos
    echo "üìù Test 2: Query de informaci√≥n de esquema"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        \timing on
        SELECT table_name, column_name, data_type 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        LIMIT 10;
    " 2>/dev/null | grep Time
    
    echo ""
}

# Funci√≥n para an√°lisis de √≠ndices
analyze_indexes() {
    echo "üîç AN√ÅLISIS DE √çNDICES"
    echo "===================="
    
    echo "üìä √çndices existentes:"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        SELECT 
            schemaname as \"Schema\",
            tablename as \"Tabla\",
            indexname as \"√çndice\",
            indexdef as \"Definici√≥n\"
        FROM pg_indexes 
        WHERE schemaname = 'public'
        ORDER BY tablename;
    " 2>/dev/null
    echo ""
    
    echo "üìà Uso de √≠ndices (si hay estad√≠sticas):"
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        SELECT 
            schemaname as \"Schema\",
            tablename as \"Tabla\",
            indexname as \"√çndice\",
            idx_scan as \"Usos del √çndice\",
            idx_tup_read as \"Tuplas Le√≠das\"
        FROM pg_stat_user_indexes 
        ORDER BY idx_scan DESC;
    " 2>/dev/null
    echo ""
}

# Funci√≥n para estad√≠sticas de tablas
table_statistics() {
    echo "üìä ESTAD√çSTICAS DE TABLAS"
    echo "========================"
    
    docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -c "
        SELECT 
            schemaname as \"Schema\",
            tablename as \"Tabla\",
            n_tup_ins as \"Inserciones\",
            n_tup_upd as \"Actualizaciones\",
            n_tup_del as \"Eliminaciones\",
            seq_scan as \"Scans Secuenciales\",
            idx_scan as \"Scans por √çndice\"
        FROM pg_stat_user_tables 
        ORDER BY n_tup_ins DESC;
    " 2>/dev/null
    echo ""
}

# Funci√≥n para prueba de carga en la base de datos
db_load_test() {
    echo "üöÄ PRUEBA DE CARGA EN BASE DE DATOS"
    echo "=================================="
    
    echo "‚è±Ô∏è Ejecutando m√∫ltiples queries concurrentes..."
    
    # Crear archivo temporal con queries de prueba
    cat > /tmp/test_queries.sql << EOF
SELECT count(*) FROM pg_tables;
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';
SELECT * FROM information_schema.columns WHERE table_schema = 'public' LIMIT 5;
EOF
    
    # Ejecutar queries m√∫ltiples veces
    for i in {1..10}; do
        docker exec incuba-fiis-db psql -U cristian -d incuba_fiis_development -f /tmp/test_queries.sql > /dev/null 2>&1 &
        if [ $((i % 3)) -eq 0 ]; then
            echo "üìä Ejecutadas $i iteraciones..."
        fi
    done
    
    wait
    echo "‚úÖ Prueba de carga completada"
    echo ""
    
    # Mostrar estad√≠sticas despu√©s de la carga
    echo "üìà Estad√≠sticas despu√©s de la prueba:"
    check_active_connections
}

# Funci√≥n para guardar reporte completo
generate_report() {
    echo "üìÑ GENERANDO REPORTE DE BASE DE DATOS..."
    
    REPORT_FILE="performance_logs/database_report_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "üóÑÔ∏è REPORTE DE RENDIMIENTO - BASE DE DATOS POSTGRESQL"
        echo "Fecha: $(date)"
        echo "================================================="
        echo ""
        
        # Ejecutar todas las funciones y guardar salida
        db_basic_info
        check_active_connections
        analyze_indexes
        table_statistics
        test_basic_queries
        
    } > "$REPORT_FILE"
    
    echo "‚úÖ Reporte guardado en: $REPORT_FILE"
}

# Men√∫ principal
case "$1" in
    "info")
        check_db_connection
        db_basic_info
        ;;
    "connections")
        check_db_connection
        check_active_connections
        ;;
    "queries")
        check_db_connection
        analyze_slow_queries
        test_basic_queries
        ;;
    "indexes")
        check_db_connection
        analyze_indexes
        ;;
    "stats")
        check_db_connection
        table_statistics
        ;;
    "load")
        check_db_connection
        db_load_test
        ;;
    "report")
        check_db_connection
        generate_report
        ;;
    "all")
        echo "üéØ EJECUTANDO TODAS LAS PRUEBAS DE BASE DE DATOS"
        echo "=============================================="
        check_db_connection
        db_basic_info
        check_active_connections
        analyze_indexes
        table_statistics
        test_basic_queries
        analyze_slow_queries
        db_load_test
        generate_report
        ;;
    *)
        echo "üóÑÔ∏è SCRIPT DE PRUEBAS DE BASE DE DATOS - INCUBAUNAS"
        echo "=============================================="
        echo ""
        echo "Uso: $0 [opci√≥n]"
        echo ""
        echo "Opciones disponibles:"
        echo "  info        - Informaci√≥n b√°sica de la DB"
        echo "  connections - Verificar conexiones activas"
        echo "  queries     - An√°lisis de queries y rendimiento"
        echo "  indexes     - An√°lisis de √≠ndices"
        echo "  stats       - Estad√≠sticas de tablas"
        echo "  load        - Prueba de carga en DB"
        echo "  report      - Generar reporte completo"
        echo "  all         - Ejecutar todas las pruebas"
        echo ""
        echo "Ejemplos:"
        echo "  $0 info"
        echo "  $0 queries"
        echo "  $0 all"
        ;;
esac